#!/usr/bin/env python3
"""
Git Flow Helper CLI ðŸ‘¾.
Version: 0.3.0
Author: Edgar Pogosyan <edgar.pogosyan.a@gmail.com> (https://github.com/Edgar-P-yan)
Repository: https://github.com/Edgar-P-yan/better-git-flow-cli
Licence: this is licensed under MIT License, see file LICENSE (https://github.com/Edgar-P-yan/better-git-flow-cli/blob/main/LICENSE).
Automatically manages hotfix branches, increments tag versions, pushes to remote and etc.
The standard git-flow extension is not good enough ðŸ’©.

Available commands:

./git-flow fix start [TAG]
    Creates new "hotfix/*" branch with next-patch-version name,
    or with the specified name.

./git-flow fix finish
    Merges current "hotfix/*" branch into "main" and "develop",
    sets tags, and pushes to remote. If anything worked successfully, then
    deletes the hotfix branch.

./git-flow feat start DESCRIPTION
    Start feature branch. Works only on "develop" and "release/*" branches.

./git-flow feat finish [-mr]
    Finishes feature. Merges into develop branch. If the "-mr" flag is specified
    then it also merges into the latest "release/*" branch, and increments "-rc.*" version on it.

./git-flow help
    Show this help message.
"""

import sys
import os
from typing import Union

RELEASE_BRANCH_PREFIX = "release/"
FEATURE_BRANCH_PREFIX = "feature/"
HOTFIX_BRANCH_PREFIX = "hotfix/"
DEVELOP_BRANCH_NAME = "develop"
MAIN_BRANCH_NAME = "main"


def main() -> None:
    currentBranchName = getCurrentBranchName()

    try:
        if len(sys.argv) <= 1 or sys.argv[1] == "help" or sys.argv[1] == "--help" or sys.argv[1] == "-h":
            print(helpMessage)
        elif sys.argv[1] == "fix":
            if sys.argv[2] == "start":
                if currentBranchName != "main":
                    print("Should be on main branch to start a hotfix. Now on " +
                          currentBranchName)
                    sys.exit(1)

                if len(sys.argv) >= 4:
                    branchName = HOTFIX_BRANCH_PREFIX + sys.argv[3]
                    print("Using specified name. Creating branch " + branchName)
                    createBranch(branchName)
                else:
                    latestTag = getLatestTag()
                    branchName = HOTFIX_BRANCH_PREFIX + \
                        semverAddPatch(latestTag)
                    print("Latest tag was: " + latestTag +
                          ". Creating branch " + branchName)
                    createBranch(branchName)

            elif sys.argv[2] == "finish":
                if not currentBranchName.startswith(HOTFIX_BRANCH_PREFIX):
                    print("Should be on a hotfix branch. Now on " +
                          currentBranchName)
                    sys.exit(1)

                tagName = currentBranchName[len(HOTFIX_BRANCH_PREFIX):]

                exec("git checkout " + MAIN_BRANCH_NAME)
                exec("git merge " + currentBranchName + " --no-ff")
                exec("git tag " + tagName)
                exec("git checkout " + DEVELOP_BRANCH_NAME)
                exec("git merge " + currentBranchName + " --no-ff")
                exec("git checkout " + MAIN_BRANCH_NAME)
                exec("git push --tags origin " + DEVELOP_BRANCH_NAME +
                     " " + MAIN_BRANCH_NAME)
                exec("git branch -D " + currentBranchName)

            else:
                print(
                    "Unknown subcommand '" + sys.argv[1] + " " + sys.argv[2] + "'. See './git-flow help' for available commands.")
                sys.exit(1)

        elif sys.argv[1] == "feat":
            if sys.argv[2] == "start":
                if currentBranchName != DEVELOP_BRANCH_NAME and not currentBranchName.startswith(RELEASE_BRANCH_PREFIX):
                    print("Should be on develop branch to start a feature. Now on " +
                          currentBranchName)
                    sys.exit(1)

                if len(sys.argv) < 4:
                    print(
                        "You should specify a DESCRIPTION for you feature. See ./git-flow help")
                    sys.exit(1)

                branchName = FEATURE_BRANCH_PREFIX + sys.argv[3]
                print("Creating branch " + branchName)
                createBranch(branchName)

            elif sys.argv[2] == "finish":
                if not currentBranchName.startswith(FEATURE_BRANCH_PREFIX):
                    print("Should be on a feature branch. Now on " +
                          currentBranchName)
                    sys.exit(1)

                exec("git checkout " + DEVELOP_BRANCH_NAME)
                exec("git merge " + currentBranchName + " --no-ff")
                exec("git push")

                if "-mr" in sys.argv:
                    releaseBranchName = getLatestReleaseBranchName()

                    if releaseBranchName is None:
                        print("No release branch is found.")
                    else:
                        exec("git checkout " + releaseBranchName)
                        exec("git merge " + currentBranchName + " --no-ff")
                        latestTag = getLatestTag()
                        nextRcTag = semverIncrReleaseCandidate(latestTag)
                        exec("git tag " + tagName)
                        exec("git push && git push --tag")

        else:
            print("Unknown subcommand '" +
                  sys.argv[1] + "'. See './git-flow help' for available commands.")
            sys.exit(1)
    except Exception as inst:
        print(inst.args[0])
        sys.exit(1)


def getLatestReleaseBranchName() -> Union[str, None]:
    branches = sorted(map(
        lambda l: l.strip(),
        exec("git branch --list '" +
             RELEASE_BRANCH_PREFIX + "*'").split("\n")
    ))

    if len(branches) == 0:
        return None

    return branches[:-1]


def getCurrentBranchName() -> str:
    return exec("git rev-parse --abbrev-ref HEAD").strip()


def getLatestTag() -> str:
    return exec("git describe --tags --abbrev=0").strip()


def semverAddPatch(ver: str) -> str:
    parts = ver.split(".")
    patch = str(int(parts[-1]) + 1)

    parts = parts[:-1]
    parts.append(patch)

    return ".".join(parts)


def semverIncrReleaseCandidate(ver: str) -> str:
    """
    Accepts only v1.0.0-rc.1 format.
    """
    parts = ver.split(".")
    patch = str(int(parts[-1]) + 1)

    parts = parts[:-1]
    parts.append(patch)

    return ".".join(parts)


def createBranch(name: str) -> None:
    exec("git checkout -b " + name)


def exec(cmd: str) -> str:
    stream = os.popen(cmd)
    output = stream.read()
    code = stream.close()

    if code and code != 0:
        raise RuntimeError("Command \"" + cmd +
                           "\" returned non-0 status code: " + str(code))

    return output


helpMessage = """Git Flow Helper CLI ðŸ‘¾.
Version: 0.1.0
Automatically manages hotfix branches, increments tag versions, pushes to remote and etc.
The standard git-flow extension is not good enough ðŸ’©.

Available commands:

./git-flow fix start [TAG]
    Creates new "hotfix/*" branch with next-patch-version name, or with the specified name.

./git-flow fix finish
    Merges current "hotfix/*" branch into "main" and "develop", sets tags, and pushes to remote. If anything worked successfully, then deletes the hotfix branch.

./git-flow feat start DESCRIPTION
    Start feature branch. Works only on "develop" and "release/*" branches.

./git-flow feat finish [-mr]
    Finishes feature. Merges into develop branch. If the "-mr" flag is specified
    then it also merges into the latest "release/*" branch, and increments "-rc.*" version on it.

./git-flow help
    Show this help message.
"""


if __name__ == "__main__":
    main()
