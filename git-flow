#!/usr/bin/env python3
"""
Git Flow Helper CLI ðŸ‘¾.
Version: 0.1.0
Author: Edgar Pogosyan <edgar.pogosyan.a@gmail.com> (https://github.com/Edgar-P-yan)
Repository: https://github.com/Edgar-P-yan/better-git-flow-cli
Automatically manages hotfix branches, increments tag versions, pushes to remote and etc.
The standard git-flow extension is not good enough ðŸ’©.

Available commands:

./git-flow fix start [name]
    Creates new "hotfix/*" branch with next-patch-version name, or with the specified name.
./git-flow fix finish
    Merges current "hotfix/*" branch into "main" and "develop", sets tags, and pushes to remote.
./git-flow help
    Show this help message.
"""

import sys
import os


def main():
    currentBranchName = getCurrentBranchName()

    try:
        if len(sys.argv) <= 1 or sys.argv[1] == "help":
            print(helpMessage)
        elif sys.argv[1] == "fix":
            if sys.argv[2] == "start":
                if currentBranchName != "main":
                    print("Should be on main branch to start a hotfix. Now on " +
                          currentBranchName)
                    sys.exit(1)

                if len(sys.argv) >= 4:
                    branchName = "hotfix/" + sys.argv[3]
                    print("Using specified name. Creating branch " + branchName)
                    createBranch(branchName)
                else:
                    latestTag = getLatestTag()
                    branchName = "hotfix/" + semverAddPatch(latestTag)
                    print("Latest tag was: " + latestTag +
                          ". Creating branch " + branchName)
                    createBranch(branchName)

            elif sys.argv[2] == "finish":
                if not currentBranchName.startswith("hotfix/"):
                    print("Should be on a hotfix branch. Now on " +
                          currentBranchName)
                    sys.exit(1)

                tagName = currentBranchName[len("hotfix/"):]

                exec("git checkout main")
                exec("git merge " + currentBranchName + " --no-ff")
                exec("git tag " + tagName)
                exec("git push && git push --tag")
                exec("git checkout develop")
                exec("git merge " + currentBranchName + " --no-ff")
                exec("git push")
                exec("git checkout main")

            else:
                print(
                    "Unknown subcommand '" + sys.argv[1] + " " + sys.argv[2] + "'. See './git-flow help' for available commands.")
                sys.exit(1)

        else:
            print("Unknown subcommand '" +
                  sys.argv[1] + "'. See './git-flow help' for available commands.")
            sys.exit(1)
    except Exception as inst:
        print(inst.args[0])
        sys.exit(1)


def getCurrentBranchName():
    return exec("git rev-parse --abbrev-ref HEAD").strip()


def getLatestTag():
    return exec("git describe --tags --abbrev=0").strip()


def semverAddPatch(ver: str) -> str:
    parts = ver.split(".")
    patch = str(int(parts[-1]) + 1)

    return ".".join(parts[:-1]) + "." + patch


def createBranch(name: str):
    exec("git checkout -b " + name)


def exec(cmd: str) -> "tuple[str, int]":
    stream = os.popen(cmd)
    output = stream.read()
    code = stream.close()

    if code and code != 0:
        raise RuntimeError("Command \"" + cmd +
                           "\" returned non-0 status code: " + str(code))

    return output


helpMessage = """Git Flow Helper CLI ðŸ‘¾.
Automatically manages hotfix branches, increments tag versions, pushes to remote and etc.
The standard git-flow extension is not good enough ðŸ’©.

Available commands:

./git-flow fix start [name]
    Creates new "hotfix/*" branch with next-patch-version name, or with the specified name.
./git-flow fix finish
    Merges current "hotfix/*" branch into "main" and "develop", sets tags, and pushes to remote.
./git-flow help
    Show this help message.
"""

main()
